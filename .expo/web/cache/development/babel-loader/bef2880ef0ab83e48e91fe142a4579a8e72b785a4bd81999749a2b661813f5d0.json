{"ast":null,"code":"export function getFontType(fontWeight) {\n  if (fontWeight == 600) {\n    return 'Poppins-SemiBold';\n  } else if (fontWeight == 400) {\n    return 'Poppins-Regular';\n  } else if (fontWeight == 700) {\n    return 'Poppins-Bold';\n  } else if (fontWeight == 500) {\n    return 'Poppins-Medium';\n  } else if (fontWeight == 300) {\n    return 'Poppins-Light';\n  } else {\n    return 'Poppins-Regular';\n  }\n}\nexport function commonFontStyle(fontWeight, fontSize, color) {\n  return {\n    fontFamily: getFontType(fontWeight),\n    fontSize: actuatedNormalize(fontSize - 2),\n    color: color,\n    includeFontPadding: false\n  };\n}\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nvar _Dimensions$get = Dimensions.get('window'),\n  SCREEN_WIDTH = _Dimensions$get.width,\n  SCREEN_HEIGHT = _Dimensions$get.height;\nexport { SCREEN_WIDTH, SCREEN_HEIGHT };\nvar scale = SCREEN_WIDTH / 320;\nexport function actuatedNormalize(size) {\n  var newSize = size * scale;\n  if (Platform.OS === 'ios') {\n    return Math.round(PixelRatio.roundToNearestPixel(newSize));\n  } else {\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2;\n  }\n}","map":{"version":3,"names":["getFontType","fontWeight","commonFontStyle","fontSize","color","fontFamily","actuatedNormalize","includeFontPadding","Dimensions","Platform","PixelRatio","_Dimensions$get","get","SCREEN_WIDTH","width","SCREEN_HEIGHT","height","scale","size","newSize","OS","Math","round","roundToNearestPixel"],"sources":["/Users/gauravjain/CodeTown/invictus-ui/Src/Themes/Fonts.js"],"sourcesContent":["export function getFontType(fontWeight) {\n  if (fontWeight == 600) {\n    return 'Poppins-SemiBold';\n  } else if (fontWeight == 400) {\n    return 'Poppins-Regular';\n  } else if (fontWeight == 700) {\n    return 'Poppins-Bold';\n  } else if (fontWeight == 500) {\n    return 'Poppins-Medium';\n  } else if (fontWeight == 300) {\n    return 'Poppins-Light';\n  } else {\n    return 'Poppins-Regular';\n  }\n}\n\nexport function commonFontStyle(fontWeight, fontSize, color) {\n  return {\n    fontFamily: getFontType(fontWeight),\n    fontSize: actuatedNormalize(fontSize - 2),\n    color: color,\n    includeFontPadding: false,\n  };\n}\n\nimport {Dimensions, Platform, PixelRatio} from 'react-native';\n\nexport const {width: SCREEN_WIDTH, height: SCREEN_HEIGHT} =\n  Dimensions.get('window');\n\n// based on iphone 5s's scale\nconst scale = SCREEN_WIDTH / 320;\n\nexport function actuatedNormalize(size) {\n  const newSize = size * scale;\n  if (Platform.OS === 'ios') {\n    return Math.round(PixelRatio.roundToNearestPixel(newSize));\n  } else {\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2;\n  }\n}\n"],"mappings":"AAAA,OAAO,SAASA,WAAWA,CAACC,UAAU,EAAE;EACtC,IAAIA,UAAU,IAAI,GAAG,EAAE;IACrB,OAAO,kBAAkB;EAC3B,CAAC,MAAM,IAAIA,UAAU,IAAI,GAAG,EAAE;IAC5B,OAAO,iBAAiB;EAC1B,CAAC,MAAM,IAAIA,UAAU,IAAI,GAAG,EAAE;IAC5B,OAAO,cAAc;EACvB,CAAC,MAAM,IAAIA,UAAU,IAAI,GAAG,EAAE;IAC5B,OAAO,gBAAgB;EACzB,CAAC,MAAM,IAAIA,UAAU,IAAI,GAAG,EAAE;IAC5B,OAAO,eAAe;EACxB,CAAC,MAAM;IACL,OAAO,iBAAiB;EAC1B;AACF;AAEA,OAAO,SAASC,eAAeA,CAACD,UAAU,EAAEE,QAAQ,EAAEC,KAAK,EAAE;EAC3D,OAAO;IACLC,UAAU,EAAEL,WAAW,CAACC,UAAU,CAAC;IACnCE,QAAQ,EAAEG,iBAAiB,CAACH,QAAQ,GAAG,CAAC,CAAC;IACzCC,KAAK,EAAEA,KAAK;IACZG,kBAAkB,EAAE;EACtB,CAAC;AACH;AAAC,OAAAC,UAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,UAAA;AAIM,IAAAC,eAAA,GACLH,UAAU,CAACI,GAAG,CAAC,QAAQ,CAAC;EADLC,YAAY,GAAAF,eAAA,CAAnBG,KAAK;EAAwBC,aAAa,GAAAJ,eAAA,CAArBK,MAAM;AACd,SAAAH,YAAA,EAAAE,aAAA;AAG3B,IAAME,KAAK,GAAGJ,YAAY,GAAG,GAAG;AAEhC,OAAO,SAASP,iBAAiBA,CAACY,IAAI,EAAE;EACtC,IAAMC,OAAO,GAAGD,IAAI,GAAGD,KAAK;EAC5B,IAAIR,QAAQ,CAACW,EAAE,KAAK,KAAK,EAAE;IACzB,OAAOC,IAAI,CAACC,KAAK,CAACZ,UAAU,CAACa,mBAAmB,CAACJ,OAAO,CAAC,CAAC;EAC5D,CAAC,MAAM;IACL,OAAOE,IAAI,CAACC,KAAK,CAACZ,UAAU,CAACa,mBAAmB,CAACJ,OAAO,CAAC,CAAC,GAAG,CAAC;EAChE;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}